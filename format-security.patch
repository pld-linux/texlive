--- texlive-20130530-source/texk/devnag/src/devnag.c.wiget	2012-07-09 13:59:05.000000000 +0200
+++ texlive-20130530-source/texk/devnag/src/devnag.c	2013-07-06 13:32:29.571327342 +0200
@@ -2395,7 +2395,7 @@ void put_macro(short macro) {
 void err_ill(const char *str) {
    fprintf(stderr, "Error: illegal character(s) \"%s\" detected at line %d:\n",
 	  str, linenumber);
-   fprintf(stderr, inbuf);
+   fputs(inbuf, stderr);
    exit(1);
 }
 
--- texlive-20130530-source/texk/dvidvi/dvidvi.c.wiget	2012-07-09 14:13:15.000000000 +0200
+++ texlive-20130530-source/texk/dvidvi/dvidvi.c	2013-07-06 13:42:29.426582698 +0200
@@ -327,7 +327,7 @@ static void stringdvibuf(integer p, inte
  *   Print a usage error messsage, and quit.
  */
 static void usage(void) {
-   (void)fprintf(stderr,banner);
+   (void)fprintf(stderr,"%s", banner);
    (void)fprintf(stderr,"Usage:  dvidvi [options] input[.dvi] [output]\n");
    (void)fprintf(stderr,"where options are:\n");
    (void)fprintf(stderr,"    [-f n] first page printed     [-l n] last page printed\n");
@@ -806,7 +806,7 @@ default:
       } /* else argument with '-' */
    }  /* for */
    if (*iname == 0) {
-       (void)fprintf(stderr, banner) ;
+       (void)fprintf(stderr, "%s", banner) ;
        error("! no input file specified");
    }
    /* Inserted by djc@dsmail.hmi.de 3.8.1994 */
@@ -817,7 +817,7 @@ default:
    }
 
    if (*oname != 0 && !quiet) {
-       (void)fprintf(stderr, banner) ;
+       (void)fprintf(stderr, "%s", banner) ;
        (void)fprintf(stderr, "%s -> %s\n",iname,oname);
        temp = nextstring ;
    }
--- texlive-20130530-source/texk/ps2pkm/objects.h.wiget	2009-06-22 16:33:57.000000000 +0200
+++ texlive-20130530-source/texk/ps2pkm/objects.h	2013-07-06 13:32:29.574660538 +0200
@@ -232,7 +232,7 @@ struct xobject {
 /*SHARED*/
 /* NDW: personally, I want to see status and error messages! */
 #define IfTrace0(condition,model)                                 \
-        {if (condition) printf(model);}
+        {if (condition) puts(model);}
 #define IfTrace1(condition,model,arg0)                            \
         {if (condition) printf(model,arg0);}
 #define IfTrace2(condition,model,arg0,arg1)                       \
--- texlive-20130530-source/texk/tex4htk/t4ht.c.wiget	2013-01-08 15:07:20.000000000 +0100
+++ texlive-20130530-source/texk/tex4htk/t4ht.c	2013-07-06 13:32:29.574660538 +0200
@@ -1095,7 +1095,7 @@ static void warn_i_str
 ;
 #undef SEP
 #endif
-{  (IGNORED) fprintf(stderr,"--- warning --- ");
+{  (IGNORED) fputs("--- warning --- ",stderr);
    (IGNORED) fprintf(stderr,warn_err_mssg[n], str);
 }
 
--- texlive-20130530-source/texk/web2c/cwebboot.cin.wiget	2012-09-11 01:03:53.000000000 +0200
+++ texlive-20130530-source/texk/web2c/cwebboot.cin	2013-07-06 13:32:29.567994146 +0200
@@ -1088,7 +1088,7 @@ void
  fatal(const char*s,const char*t)
 #line 1182 "cwebdir/common.w"
 {
-if(*s)printf(s);
+if(*s)printf("%s", s);
 err_print(t);
 history= fatal_message;exit(wrap_up());
 }
--- texlive-20130530-source/texk/web2c/cwebdir/common.w.wiget	2012-09-05 15:27:45.000000000 +0200
+++ texlive-20130530-source/texk/web2c/cwebdir/common.w	2013-07-06 13:32:29.561327754 +0200
@@ -1180,7 +1180,7 @@ concatenated to print the final error me
 fatal(s,t)
   char *s,*t;
 {
-  if (*s) printf(s);
+  if (*s) puts(s);
   err_print(t);
   history=fatal_message; exit(wrap_up());
 }
--- texlive-20130530-source/texk/web2c/cwebdir/cweave.w.wiget	2012-09-05 15:27:45.000000000 +0200
+++ texlive-20130530-source/texk/web2c/cwebdir/cweave.w	2013-07-06 13:32:29.564660950 +0200
@@ -1784,7 +1784,7 @@ void
 print_cat(c) /* symbolic printout of a category */
 eight_bits c;
 {
-  printf(cat_name[c]);
+  puts(cat_name[c]);
 }
 
 @ The token lists for translated \TEX/ output contain some special control
--- texlive-20130530-source/texk/web2c/omegafonts/out_routines.c.wiget	2009-11-10 11:27:09.000000000 +0100
+++ texlive-20130530-source/texk/web2c/omegafonts/out_routines.c	2013-07-06 13:32:29.567994146 +0200
@@ -383,5 +383,5 @@ out_digits(unsigned counter)
 void
 out(const_string sval)
 {
-	fprintf(file_output, sval);
+	fputs(sval, file_output);
 }
--- texlive-20130530-source/texk/web2c/tiedir/tie.w.wiget	2009-03-09 09:29:33.000000000 +0100
+++ texlive-20130530-source/texk/web2c/tiedir/tie.w	2013-07-06 13:32:29.567994146 +0200
@@ -465,7 +465,7 @@ for terminating an output line and writi
 @d new_line(v)  fputc('\n',v) /* start new line */
 @d term_new_line  new_line(term_out)
 	/* start new line of the terminal */
-@d print_ln(v)  {fprintf(term_out,v);term_new_line;}
+@d print_ln(v)  {fputs(v,term_out);term_new_line;}
 	/* `|print|' and then start new line */
 @d print2_ln(a,b)  {print2(a,b);term_new_line;} /* same with two arguments */
 @d print3_ln(a,b,c)  {print3(a,b,c);term_new_line;}
--- texlive-20130530-source/texk/xdvik/gui/message-window.c.wiget	2009-06-22 16:29:44.000000000 +0200
+++ texlive-20130530-source/texk/xdvik/gui/message-window.c	2013-07-06 13:32:29.574660538 +0200
@@ -713,7 +713,7 @@ internal_popup_window(Widget parent,
     Widget ret;
 
     ASSERT(type < (sizeof my_msg_map / sizeof my_msg_map[0]), "too few elements in my_msg_map");
-    sprintf(win_title, my_msg_map[type].window_title);
+    sprintf(win_title, "%s", my_msg_map[type].window_title);
 
 #if DEBUG
     fprintf(stderr, "internal_popup_window called with prompt: \"%s\"\n", msg_buf);
@@ -725,11 +725,10 @@ internal_popup_window(Widget parent,
 	   supposed to be printf-format strings (i.e. with doubled `%' to escape them)
 	*/
 	fprintf(stderr, "\n%s:\n", my_msg_map[type].window_title);
-	fprintf(stderr, msg_buf);
-	fprintf(stderr, "\n");
+	fprintf(stderr, "%s\n", msg_buf);
 	if (helptext) {
 	    fprintf(stderr, "---------- helptext ----------\n");
-	    fprintf(stderr, helptext);
+	    fprintf(stderr, "%s", helptext);
 	    fprintf(stderr, "\n---------- end of helptext ----------\n");
 	}
 	return NULL;
@@ -741,8 +740,7 @@ internal_popup_window(Widget parent,
     if (my_popup_num == MAX_POPUPS) {
 	/* already enough popups on screen, just dump it to stderr */
 	fprintf(stderr, "%s: ", win_title);
-	fprintf(stderr, msg_buf);
-	fputc('\n', stderr);
+	fprintf(stderr, "%s\n", msg_buf);
 	/* Note: If a mad function continues to open popups, this will
 	 * stop after MAX_POPUPS, but open a new window for each
 	 * window the user pops down. Maybe we ought to do something
--- texlive-20130530-source/texk/web2c/omegafonts/error_routines.c.orig	2009-11-10 11:27:09.000000000 +0100
+++ texlive-20130530-source/texk/web2c/omegafonts/error_routines.c	2013-07-06 14:38:00.368383713 +0200
@@ -32,6 +32,71 @@ They
 
 */
 
+#if defined(__GNUC__) && (__GNUC__ >= 3)
+#include <string.h>
+#include <stdarg.h>
+#include <stdlib.h>
+
+void
+lex_error(string fmt, ...)
+{
+ va_list ap;
+
+  fprintf(stderr, "line %d (lexing): ", line_number);
+  va_start(ap, fmt);
+  vfprintf(stderr, fmt, ap);
+  va_end(ap);
+  fprintf(stderr, "\n");
+}
+
+void
+fatal_error(string fmt, ...)
+{
+ va_list ap;
+
+ fprintf(stderr, "line %d (fatal): ", line_number);
+ va_start(ap, fmt);
+ vfprintf(stderr, fmt, ap);
+ va_end(ap);
+ fprintf(stderr, "\n");
+ exit(1);
+}
+
+void
+yyerror(string fmt)
+{
+ fprintf(stderr, "line %d (parsing): ", line_number);
+ fprintf(stderr, "%s", fmt);
+ fprintf(stderr, "\n");
+}
+
+void
+warning_(string fmt, ...)
+{
+ va_list ap;
+
+ fprintf(stderr, "line %d (warning): ", line_number);
+ va_start(ap, fmt);
+ vfprintf(stderr, fmt, ap);
+ va_end(ap);
+ fprintf(stderr, "\n");
+}
+
+void
+internal_error(string fmt, ...)
+{
+ va_list ap;
+
+ fprintf(stderr, "line %d (internal): ", line_number);
+ va_start(ap, fmt);
+ vfprintf(stderr, fmt, ap);
+ va_end(ap);
+ fprintf(stderr, "\n");
+ exit(2);
+}
+
+#else
+
 void
 lex_error_0(const_string fmt)
 {
@@ -183,3 +248,4 @@ internal_error_s(const_string fmt, const
     fprintf(stderr, "\n");
     exit(2);
 }
+#endif
--- texlive-20130530-source/texk/web2c/omegafonts/error_routines.h.orig	2013-07-06 14:38:00.378383329 +0200
+++ texlive-20130530-source/texk/web2c/omegafonts/error_routines.h	2013-07-06 14:40:20.693000755 +0200
@@ -21,6 +21,30 @@ along with Omega; if not, write to the F
 
 */
 
+#if defined(__GNUC__) && (__GNUC__ >= 3)
+#define lex_error_0(a) lex_error("%s", a)
+#define lex_error_1(a, b) lex_error(a, b)
+#define lex_error_s(a, b) lex_error(a, b)
+#define lex_error_s_1(a, b, c) lex_error(a, b, c)
+extern void lex_error(string, ...) __attribute__ ((format (printf, 1, 2)));
+#define fatal_error_0(a) fatal_error("%s", a)
+#define fatal_error_1(a, b) fatal_error(a, b)
+#define fatal_error_2(a, b, c) fatal_error(a, b, c)
+#define fatal_error_s(a, b) fatal_error(a, b)
+extern void fatal_error(string, ...) __attribute__ ((format (printf, 1, 2)));
+extern void yyerror(string);
+#define warning_0(a) warning_("%s", a)
+#define warning_1(a, b) warning_(a, b)
+#define warning_2(a, b, c) warning_(a, b, c)
+#define warning_s(a, b) warning_(a, b)
+#define warning_s_1(a, b, c) warning_(a, b, c)
+#define warning_s_2(a, b, c, d) warning_(a, b, c, d)
+extern void warning_(string, ...) __attribute__ ((format (printf, 1, 2)));
+#define internal_error_0(a) internal_error("%s", a)
+#define internal_error_1(a, b) internal_error(a, b)
+#define internal_error_s(a, b) internal_error(a, b)
+extern void internal_error(string, ...) __attribute__ ((format (printf, 1, 2)));
+#else
 extern void lex_error_0(const_string);
 extern void lex_error_1(const_string, int);
 extern void lex_error_s(const_string, const_string);
@@ -43,3 +67,4 @@ extern void warning_s_2(const_string, co
 extern void internal_error_0(const_string);
 extern void internal_error_1(const_string, int);
 extern void internal_error_s(const_string, const_string);
+#endif
